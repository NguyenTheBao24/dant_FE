-- Thêm bảng rooms để quản lý chi tiết từng phòng
CREATE TABLE public.rooms (
    id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    hostel_id bigint NOT NULL,
    room_number text NOT NULL,
    room_type text NULL, -- 'single', 'double', 'vip', etc.
    rent_amount numeric NULL,
    status text DEFAULT 'available'::text, -- 'available', 'occupied', 'maintenance'
    area numeric NULL, -- diện tích phòng (m2)
    floor integer NULL,
    description text NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT rooms_pkey PRIMARY KEY (id),
    CONSTRAINT rooms_hostel_id_fkey FOREIGN KEY (hostel_id) REFERENCES hostels(id) ON DELETE CASCADE,
    CONSTRAINT rooms_unique_per_hostel UNIQUE (hostel_id, room_number)
);

-- Tạo index để tối ưu truy vấn
CREATE INDEX idx_rooms_hostel_id ON public.rooms(hostel_id);
CREATE INDEX idx_rooms_status ON public.rooms(status);
CREATE INDEX idx_rooms_room_number ON public.rooms(room_number);

-- Cập nhật bảng tenants để tham chiếu đến rooms
ALTER TABLE public.tenants 
ADD COLUMN room_id bigint NULL,
ADD CONSTRAINT tenants_room_id_fkey FOREIGN KEY (room_id) REFERENCES rooms(id);

-- Tạo trigger để tự động cập nhật occupancy khi có thay đổi
CREATE OR REPLACE FUNCTION update_hostel_occupancy()
RETURNS TRIGGER AS $$
BEGIN
    -- Cập nhật occupancy dựa trên số phòng đã thuê
    UPDATE hostels 
    SET occupancy = (
        SELECT COUNT(*) 
        FROM tenants t 
        JOIN rooms r ON t.room_id = r.id 
        WHERE r.hostel_id = hostels.id 
        AND t.status = 'active'
    )
    WHERE id = (
        SELECT r.hostel_id 
        FROM rooms r 
        WHERE r.id = COALESCE(NEW.room_id, OLD.room_id)
    );
    
    RETURN COALESCE(NEW, OLD);
END;
$$ LANGUAGE plpgsql;

-- Tạo trigger cho bảng tenants
CREATE TRIGGER trigger_update_occupancy_on_tenant_change
    AFTER INSERT OR UPDATE OR DELETE ON tenants
    FOR EACH ROW
    EXECUTE FUNCTION update_hostel_occupancy();

-- Tạo trigger cho bảng rooms
CREATE TRIGGER trigger_update_occupancy_on_room_change
    AFTER UPDATE ON rooms
    FOR EACH ROW
    EXECUTE FUNCTION update_hostel_occupancy();

-- Enable Row Level Security
ALTER TABLE public.rooms ENABLE ROW LEVEL SECURITY;

-- Tạo policy cho bảng rooms
CREATE POLICY "Enable all operations for all users" ON public.rooms FOR ALL USING (true);

-- Thêm dữ liệu mẫu cho rooms
INSERT INTO public.rooms (hostel_id, room_number, room_type, rent_amount, status, area, floor, description) VALUES
-- Khu trọ ABC (hostel_id = 1)
(1, 'A101', 'Phòng đơn', 2500000, 'occupied', 20, 1, 'Phòng đơn có ban công'),
(1, 'A102', 'Phòng đơn', 2500000, 'occupied', 20, 1, 'Phòng đơn có ban công'),
(1, 'A103', 'Phòng đôi', 3500000, 'available', 30, 1, 'Phòng đôi rộng rãi'),
(1, 'A104', 'Phòng đôi', 3500000, 'available', 30, 1, 'Phòng đôi rộng rãi'),
(1, 'A201', 'Phòng VIP', 4500000, 'available', 40, 2, 'Phòng VIP cao cấp'),
(1, 'A202', 'Phòng VIP', 4500000, 'available', 40, 2, 'Phòng VIP cao cấp'),
(1, 'A203', 'Phòng đơn', 2500000, 'available', 20, 2, 'Phòng đơn có ban công'),
(1, 'A204', 'Phòng đơn', 2500000, 'available', 20, 2, 'Phòng đơn có ban công'),

-- Khu trọ XYZ (hostel_id = 2)
(2, 'B101', 'Phòng đơn', 2000000, 'occupied', 18, 1, 'Phòng đơn tiết kiệm'),
(2, 'B102', 'Phòng đơn', 2000000, 'occupied', 18, 1, 'Phòng đơn tiết kiệm'),
(2, 'B103', 'Phòng đôi', 3000000, 'available', 25, 1, 'Phòng đôi bình dân'),
(2, 'B104', 'Phòng đôi', 3000000, 'available', 25, 1, 'Phòng đôi bình dân'),
(2, 'B201', 'Phòng đơn', 2000000, 'occupied', 18, 2, 'Phòng đơn tiết kiệm'),
(2, 'B202', 'Phòng đơn', 2000000, 'available', 18, 2, 'Phòng đơn tiết kiệm'),
(2, 'B203', 'Phòng đôi', 3000000, 'available', 25, 2, 'Phòng đôi bình dân'),
(2, 'B204', 'Phòng đôi', 3000000, 'available', 25, 2, 'Phòng đôi bình dân');

-- Cập nhật tenants để tham chiếu đến rooms
UPDATE public.tenants 
SET room_id = (
    SELECT r.id 
    FROM rooms r 
    WHERE r.hostel_id = tenants.hostel_id 
    AND r.room_number = tenants.room_number 
    LIMIT 1
)
WHERE room_number IS NOT NULL;

-- Cập nhật occupancy cho các hostel
UPDATE public.hostels 
SET occupancy = (
    SELECT COUNT(*) 
    FROM tenants t 
    JOIN rooms r ON t.room_id = r.id 
    WHERE r.hostel_id = hostels.id 
    AND t.status = 'active'
),
rooms = (
    SELECT COUNT(*) 
    FROM rooms r 
    WHERE r.hostel_id = hostels.id
);
